package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    private JoinPredicate p;
    private DbIterator child1;
    private DbIterator child2;
    Tuple tupleChild1;
	Tuple tupleChild2;
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
    	this.p = p;
    	this.child1 = child1;
    	this.child2 = child2;
    	
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return child1.getTupleDesc().getFieldName(p.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return child2.getTupleDesc().getFieldName(p.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
    	super.open();
    	child1.open();
    	child2.open();
    }

    public void close() {
        // some code goes here
    	super.close();
    	child1.close();
    	child2.close();
    	tupleChild1 = null;
    	tupleChild2 = null;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
    	this.close();
    	this.open();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
    	
    	Tuple merged;
    	if (child1.hasNext() && tupleChild1 == null) {
    		tupleChild1 = child1.next();
    	}
    	tupleChild2 = null;
    	while(tupleChild1 != null) {
    		while(child2.hasNext()) {
    			tupleChild2 = child2.next();
    			merged = null;
    			if (p.filter(tupleChild1, tupleChild2)) {
    				merged = mergeTup(tupleChild1, tupleChild2);
    			}
    			if (merged != null) {
    				return merged;
    			}
    		}
    		if (child1.hasNext()) {
    			tupleChild1 = child1.next();
    			child2.rewind();
    		}
    		else break;
    	}
        return null;
    }
    
    private Tuple mergeTup(Tuple tup1, Tuple tup2) {
    	int numField1 = tup1.getTupleDesc().numFields();
    	int numField2 = tup2.getTupleDesc().numFields();
    	Tuple merge = new Tuple(this.getTupleDesc());
    	int numFieldMerge = merge.getTupleDesc().numFields();
    	if ((numField1 + numField2) != numFieldMerge) {
    		return null;
    	}
    	for (int i = 0; i < numField1; i++) {
    		merge.setField(i, tup1.getField(i));
    	}
    	for (int j = numField1; j < numFieldMerge; j++) {
    		merge.setField(j, tup2.getField(j - numField1));
    	}
    	return merge;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
    	DbIterator[] childrenList = new DbIterator[2];
    	childrenList[0] = child1;
    	childrenList[1] = child2;
        return childrenList;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
    	child1 = children[0];
    	child2 = children[1];
    }

}
